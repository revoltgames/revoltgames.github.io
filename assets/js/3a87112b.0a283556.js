"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},o="Introduction",l={unversionedId:"terra/intro",id:"terra/intro",title:"Introduction",description:"This documentation is still WIP. If you notice any typo, broken link or other issue for the API or documentation, make sure to file a Github Issue by clicking on the Report an issue button at the top right corner.",source:"@site/docs/terra/intro.md",sourceDirName:"terra",slug:"/terra/intro",permalink:"/docs/terra/intro",draft:!1,editUrl:"https://github.com/revoltgames/docs/tree/main/docs/terra/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Terra API",permalink:"/docs/category/terra-api"},next:{title:"Getting Started",permalink:"/docs/terra/getting-started"}},s={},d=[{value:"Terra entities",id:"terra-entities",level:2},{value:"Lands and h3Geo",id:"lands-and-h3geo",level:2},{value:"Lands and biomes",id:"lands-and-biomes",level:2},{value:"Country translations",id:"country-translations",level:2},{value:"Example Graphics",id:"example-graphics",level:2}],c={toc:d};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("admonition",{title:"Note",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This documentation is still WIP. If you notice any typo, broken link or other issue for the API or documentation, make sure to file a Github Issue by clicking on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Report an issue")," button at the top right corner.")),(0,i.kt)("p",null,"Terra is an API of real-world data indexed on h3. This data is served via an API for Neopolis and Neoland."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cultural data (country, closest city)"),(0,i.kt)("li",{parentName:"ul"},"Natural data (biomes: urban, forst, desert, etc)"),(0,i.kt)("li",{parentName:"ul"},"Curated Places (real world buildings)")),(0,i.kt)("admonition",{title:"Disclaimer",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"At the time of writing (18/08/2022), the API is available for testing only. It is NOT fully compatible with either Neopolis or Neoland."),(0,i.kt)("p",{parentName:"admonition"},"The list of differences includes :"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Countries & cities are not the same as in Neoland or Neopolis. The ids are also different"),(0,i.kt)("li",{parentName:"ul"},"The land informations (ex: closest city or even associated country) may be different"),(0,i.kt)("li",{parentName:"ul"},"The places are currently only in v2 (incompatible with Neoland) and are NOT kept up-to-date")),(0,i.kt)("p",{parentName:"admonition"},"The Terra Database will be updated regularly for solving these incompatibility issues & other bugs that may arrise.")),(0,i.kt)("h2",{id:"terra-entities"},"Terra entities"),(0,i.kt)("p",null,"Terra has 4 main entities"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"countries")," a curated list of soverain states in the world"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cities")," a curated list of cities in the world"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lands")," are the building blocks of Terra and are associated to a ",(0,i.kt)("inlineCode",{parentName:"li"},"closest city")," and to ",(0,i.kt)("inlineCode",{parentName:"li"},"biomes"),". Their ids are h3 indexes of resolution 8."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"places")," defines a real-world point of interest (building, station, shop, office, etc...)")),(0,i.kt)("h2",{id:"lands-and-h3geo"},"Lands and h3Geo"),(0,i.kt)("p",null,"Each land is identified by a unique h3 index of resolution 8, representing a geospatial hexagon with en edge length of ~460m. For more info on h3, see ",(0,i.kt)("a",{parentName:"p",href:"https://h3geo.org/"},"the official documentation"),"."),(0,i.kt)("h2",{id:"lands-and-biomes"},"Lands and biomes"),(0,i.kt)("p",null,"All lands have a ",(0,i.kt)("inlineCode",{parentName:"p"},"main_biome")," , which is the most dominant biome in the given land. It il also possible to get the biome details, in percentage for all biomes in the land."),(0,i.kt)("p",null,"For a complete list of available biomes, see ",(0,i.kt)("a",{parentName:"p",href:"./biomes"},"Biomes")),(0,i.kt)("h2",{id:"country-translations"},"Country translations"),(0,i.kt)("p",null,"Country names can be translated in a various langages using the ",(0,i.kt)("inlineCode",{parentName:"p"},"lang")," parameter. To see all available langcodes, see ",(0,i.kt)("a",{parentName:"p",href:"./langcodes"},"Langcodes")),(0,i.kt)("h2",{id:"example-graphics"},"Example Graphics"),(0,i.kt)("p",null,"Countries and cities in North America\n",(0,i.kt)("img",{alt:"North America",src:n(2860).Z,width:"1000",height:"707"})),(0,i.kt)("p",null,"Closest city vizualisation in France (data not up-to-date)\n",(0,i.kt)("img",{alt:"Closest City in France",src:n(2605).Z,width:"1000",height:"707"})))}p.isMDXComponent=!0},2605:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/closest-city-france-79fdc795e5d65655ecc4ef6bea3d7982.png"},2860:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/countries-usa-336a51d72875a5964e10193f3ee8b6eb.png"}}]);